{"version":3,"sources":["components/Navbar.js","components/footer.js","components/About.js","components/Home.js","components/Sarcasm.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","useSpring","opacity","from","div","style","className","to","footer","foot","background","marginbottom","color","padding","paddingbottom","About","Home","useState","joke","setjoke","firstname","setfirstname","sname","setsname","newjoke","first","second","fetch","then","res","json","res1","console","log","value","useEffect","type","onChange","e","target","onClick","Sarcasm","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e11e55d7.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {useSpring, animated} from 'react-spring';\r\n\r\nexport default function Navbar() {\r\n  const props = useSpring({opacity: 1, from: {opacity: 0}})\r\n\r\n  return (\r\n    <div >\r\n      <animated.div style={props}>\r\n    <nav >\r\n    <div className=\"nav-wrapper teal lighten-2\">\r\n      <div className=\"container\">\r\n      <Link to=\"/\" className=\"brand-logo center\">Fun on names</Link>\r\n    \r\n      <ul  className=\"center hide-on-med-and-down\">\r\n        <li>\r\n          <Link to=\"/\" >Home</Link>\r\n          </li>\r\n       \r\n        <li>\r\n          <Link to=\"/Sarcasm\">Nerd</Link>\r\n          </li>\r\n\r\n          <li>\r\n          <Link to=\"/about\">About</Link>\r\n          </li>  \r\n      </ul>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  </animated.div>\r\n\r\n \r\n</div>\r\n    \r\n  )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function footer() {\r\n\r\n  \r\n  return (\r\n    \r\n   \r\n    <div style={foot}>\r\n      <h5>Please don't take joke seriously, relax and enjoy your life</h5>\r\n    </div>\r\n    \r\n   \r\n  )\r\n}\r\nconst foot={\r\n  background:'#7e57c2',\r\n  marginbottom:'2rem',\r\n  color:'white',\r\n  padding:'3rem',\r\n  paddingbottom:'0.rem' ,\r\n}","import React from 'react'\r\nimport Footer from '../components/footer'\r\nimport {useSpring, animated} from 'react-spring';\r\n\r\n\r\n\r\nexport default function About() {\r\n  const props = useSpring({opacity: 0.5, from: {opacity: 1}})\r\n  return (\r\n    <animated.div style={props}>\r\n   <div>\r\n     <h1> about page</h1>\r\n     <h4>Developed by unrealworld tech</h4>\r\n     <Footer/>\r\n    </div>\r\n    </animated.div>\r\n  )\r\n}\r\n","import React,{useState,useEffect} from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n\r\n  const [joke,setjoke]=useState(\"loading\");\r\n  const [firstname,setfirstname]=useState(\"John\");\r\n  const [sname,setsname]=useState(\"Wich\");\r\n\r\n\r\n  const newjoke=(first,second)=>{ fetch(`http://api.icndb.com/jokes/random?firstName=${first}&lastName=${second}`).\r\n  then(res=>res.json())\r\n  .then(res1=>{\r\n    console.log(res1);\r\n    setjoke(res1.value.joke);\r\n  })\r\n\r\n  };\r\n  useEffect(()=>{\r\n   newjoke(firstname,sname)\r\n  },[]);\r\n  return (\r\n    <div className=\"App\">\r\n     \r\n      <h1>\r\n        Jokes on name</h1>\r\n        <input type=\"text\" value={firstname} onChange={(e)=>setfirstname(e.target.value)}/>\r\n        <input type=\"text\" value={sname} onChange={(e)=>setsname(e.target.value)}/>\r\n      <h4  style={foot}>\r\n        {joke}\r\n      </h4>\r\n      \r\n      <button className =\"btn-floating btn-large waves-effect waves-light red\" onClick={()=>newjoke(firstname,sname)} >next</button>\r\n      <div style={foot} >\r\n      </div>\r\n     \r\n    </div>\r\n  \r\n    \r\n  );\r\n \r\n}\r\n\r\nexport default Home;\r\n\r\nconst foot={\r\n  \r\n padding:'1rem'\r\n}","import React,{useState,useEffect} from 'react';\r\n\r\n\r\nexport default function Sarcasm() {\r\n  const [joke,setjoke]=useState(\"loading\");\r\n\r\n  const newjoke=()=>{ fetch(`http://api.icndb.com/jokes/random?limitTo=[nerdy]`).\r\n  then(res=>res.json())\r\n  .then(res1=>{\r\n    console.log(res1);\r\n    setjoke(res1.value.joke);\r\n  })\r\n\r\n  };\r\n\r\n  useEffect(()=>{\r\n    newjoke()\r\n   },[]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>nerd</h1>\r\n\r\n      \r\n      <h1>\r\n        Jokes</h1>\r\n        \r\n      <h4>\r\n        {joke}\r\n      </h4>\r\n      <button className =\"btn-floating btn-large waves-effect waves-light red\" onClick={()=>newjoke()} >Next</button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport Home from './components/Home';\nimport Sarcasm from './components/Sarcasm';\n\n\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\nimport './App.css';\n\n\n\nfunction App() {\n \n  \n  return (\n       \n      <Router>\n        \n      <Navbar/>\n      <div className= \"container\">\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/About\"  component={About}/>\n      <Route exact path=\"/Sarcasm\"  component={Sarcasm}/>\n      \n      </div>\n     \n      </Router>\n     \n      \n     \n   \n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}